# frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: aakashbodade/react:9-latest
        ports:
        - containerPort: 3000
        env:
        - name: CHOKIDAR_USEPOLLING
          value: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP  # Changed from clusterIP: None to proper type

---
# frontend-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
  - http:  # Removed host for IP-based access
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service  # This is correct - points to nginx proxy
            port:
              number: 80

---
# nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    events {}
    http {
      server {
        listen 80;

        location / {
          proxy_pass http://frontend-service:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
    }

---
# nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-proxy
  template:
    metadata:
      labels:
        app: nginx-proxy
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-proxy
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# signin.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: signin-deployment  # Changed from shoppingapp-deployment for clarity
  labels:
    app: shoppingapp
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: shoppingapp
      microservice: signin
  template:
    metadata:
      labels:
        app: shoppingapp
        microservice: signin
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
    spec:
      containers:
        - name: signin-container
          image: aakashbodade/signin:10-latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_PASSWORD
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:  # Uncommented health checks
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: signin-svc
  labels:
    app: shoppingapp
    microservice: signin
spec:
  type: ClusterIP
  selector:
    app: shoppingapp
    microservice: signin
  ports:
    - port: 80
      targetPort: 8000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-config
  namespace: default
data:
  DB_HOST: "database-1.c7yqusii0vji.ap-south-1.rds.amazonaws.com"
  DB_PORT: "5432"
  DB_NAME: "shoppingapp"
---
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: default
type: Opaque
data:
  DB_USER: cG9zdGdyZXM=     # base64 encoded 'postgres'
  DB_PASSWORD: QWFrYXNoMTk5Nw==  # base64 encoded 'Aakash1997'

---
# signup.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: signup-deployment
  labels:
    app: shoppingapp
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: shoppingapp
      microservice: signup
  template:
    metadata:
      labels:  # Removed name field as it's not needed in template metadata
        app: shoppingapp
        microservice: signup
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"  # Changed to match container port
    spec:
      containers:
        - name: signup-container
          image: aakashbodade/signup:10-latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8001
          env:
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-credentials
                  key: DB_PASSWORD
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          readinessProbe:  # Added health checks for consistency
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8001
            initialDelaySeconds: 15
            periodSeconds: 20
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: signup-svc
  labels:
    app: shoppingapp
    microservice: signup
spec:
  type: ClusterIP
  selector:
    app: shoppingapp
    microservice: signup
  ports:
    - port: 80
      targetPort: 8001